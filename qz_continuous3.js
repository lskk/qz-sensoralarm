// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var ContinuousStream = exports.ContinuousStream = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineContinuousStream()

function defineContinuousStream () {
  var enc = [
    encodings.string,
    encodings.bytes,
    encodings.varint,
    encodings.float
  ]

  ContinuousStream.encodingLength = encodingLength
  ContinuousStream.encode = encode
  ContinuousStream.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.station_id)) {
      var len = enc[0].encodingLength(obj.station_id)
      length += 1 + len
    }
    if (defined(obj.signature)) {
      var len = enc[1].encodingLength(obj.signature)
      length += 1 + len
    }
    if (defined(obj.start_time)) {
      var len = enc[2].encodingLength(obj.start_time)
      length += 1 + len
    }
    if (defined(obj.duration)) {
      var len = enc[2].encodingLength(obj.duration)
      length += 1 + len
    }
    if (defined(obj.location_sampling_rate)) {
      var len = enc[2].encodingLength(obj.location_sampling_rate)
      length += 1 + len
    }
    if (defined(obj.motion_sampling_rate)) {
      var len = enc[2].encodingLength(obj.motion_sampling_rate)
      length += 1 + len
    }
    if (defined(obj.latitude)) {
      for (var i = 0; i < obj.latitude.length; i++) {
        if (!defined(obj.latitude[i])) continue
        var len = enc[3].encodingLength(obj.latitude[i])
        length += 1 + len
      }
    }
    if (defined(obj.longitude)) {
      for (var i = 0; i < obj.longitude.length; i++) {
        if (!defined(obj.longitude[i])) continue
        var len = enc[3].encodingLength(obj.longitude[i])
        length += 1 + len
      }
    }
    if (defined(obj.altitude)) {
      for (var i = 0; i < obj.altitude.length; i++) {
        if (!defined(obj.altitude[i])) continue
        var len = enc[3].encodingLength(obj.altitude[i])
        length += 1 + len
      }
    }
    if (defined(obj.gravity_x)) {
      for (var i = 0; i < obj.gravity_x.length; i++) {
        if (!defined(obj.gravity_x[i])) continue
        var len = enc[3].encodingLength(obj.gravity_x[i])
        length += 1 + len
      }
    }
    if (defined(obj.gravity_y)) {
      for (var i = 0; i < obj.gravity_y.length; i++) {
        if (!defined(obj.gravity_y[i])) continue
        var len = enc[3].encodingLength(obj.gravity_y[i])
        length += 1 + len
      }
    }
    if (defined(obj.gravity_z)) {
      for (var i = 0; i < obj.gravity_z.length; i++) {
        if (!defined(obj.gravity_z[i])) continue
        var len = enc[3].encodingLength(obj.gravity_z[i])
        length += 1 + len
      }
    }
    if (defined(obj.geomagnetic_x)) {
      for (var i = 0; i < obj.geomagnetic_x.length; i++) {
        if (!defined(obj.geomagnetic_x[i])) continue
        var len = enc[3].encodingLength(obj.geomagnetic_x[i])
        length += 1 + len
      }
    }
    if (defined(obj.geomagnetic_y)) {
      for (var i = 0; i < obj.geomagnetic_y.length; i++) {
        if (!defined(obj.geomagnetic_y[i])) continue
        var len = enc[3].encodingLength(obj.geomagnetic_y[i])
        length += 1 + len
      }
    }
    if (defined(obj.geomagnetic_z)) {
      for (var i = 0; i < obj.geomagnetic_z.length; i++) {
        if (!defined(obj.geomagnetic_z[i])) continue
        var len = enc[3].encodingLength(obj.geomagnetic_z[i])
        length += 1 + len
      }
    }
    if (defined(obj.raw_accel_x)) {
      for (var i = 0; i < obj.raw_accel_x.length; i++) {
        if (!defined(obj.raw_accel_x[i])) continue
        var len = enc[3].encodingLength(obj.raw_accel_x[i])
        length += 2 + len
      }
    }
    if (defined(obj.raw_accel_y)) {
      for (var i = 0; i < obj.raw_accel_y.length; i++) {
        if (!defined(obj.raw_accel_y[i])) continue
        var len = enc[3].encodingLength(obj.raw_accel_y[i])
        length += 2 + len
      }
    }
    if (defined(obj.raw_accel_z)) {
      for (var i = 0; i < obj.raw_accel_z.length; i++) {
        if (!defined(obj.raw_accel_z[i])) continue
        var len = enc[3].encodingLength(obj.raw_accel_z[i])
        length += 2 + len
      }
    }
    if (defined(obj.linear_accel_x)) {
      for (var i = 0; i < obj.linear_accel_x.length; i++) {
        if (!defined(obj.linear_accel_x[i])) continue
        var len = enc[3].encodingLength(obj.linear_accel_x[i])
        length += 2 + len
      }
    }
    if (defined(obj.linear_accel_y)) {
      for (var i = 0; i < obj.linear_accel_y.length; i++) {
        if (!defined(obj.linear_accel_y[i])) continue
        var len = enc[3].encodingLength(obj.linear_accel_y[i])
        length += 2 + len
      }
    }
    if (defined(obj.linear_accel_z)) {
      for (var i = 0; i < obj.linear_accel_z.length; i++) {
        if (!defined(obj.linear_accel_z[i])) continue
        var len = enc[3].encodingLength(obj.linear_accel_z[i])
        length += 2 + len
      }
    }
    if (defined(obj.rotation_rate_x)) {
      for (var i = 0; i < obj.rotation_rate_x.length; i++) {
        if (!defined(obj.rotation_rate_x[i])) continue
        var len = enc[3].encodingLength(obj.rotation_rate_x[i])
        length += 2 + len
      }
    }
    if (defined(obj.rotation_rate_y)) {
      for (var i = 0; i < obj.rotation_rate_y.length; i++) {
        if (!defined(obj.rotation_rate_y[i])) continue
        var len = enc[3].encodingLength(obj.rotation_rate_y[i])
        length += 2 + len
      }
    }
    if (defined(obj.rotation_rate_z)) {
      for (var i = 0; i < obj.rotation_rate_z.length; i++) {
        if (!defined(obj.rotation_rate_z[i])) continue
        var len = enc[3].encodingLength(obj.rotation_rate_z[i])
        length += 2 + len
      }
    }
    if (defined(obj.inclination_matrix_5)) {
      for (var i = 0; i < obj.inclination_matrix_5.length; i++) {
        if (!defined(obj.inclination_matrix_5[i])) continue
        var len = enc[3].encodingLength(obj.inclination_matrix_5[i])
        length += 2 + len
      }
    }
    if (defined(obj.inclination_matrix_6)) {
      for (var i = 0; i < obj.inclination_matrix_6.length; i++) {
        if (!defined(obj.inclination_matrix_6[i])) continue
        var len = enc[3].encodingLength(obj.inclination_matrix_6[i])
        length += 2 + len
      }
    }
    if (defined(obj.inclination_matrix_9)) {
      for (var i = 0; i < obj.inclination_matrix_9.length; i++) {
        if (!defined(obj.inclination_matrix_9[i])) continue
        var len = enc[3].encodingLength(obj.inclination_matrix_9[i])
        length += 2 + len
      }
    }
    if (defined(obj.inclination_matrix_10)) {
      for (var i = 0; i < obj.inclination_matrix_10.length; i++) {
        if (!defined(obj.inclination_matrix_10[i])) continue
        var len = enc[3].encodingLength(obj.inclination_matrix_10[i])
        length += 2 + len
      }
    }
    if (defined(obj.rotation_matrix_0)) {
      for (var i = 0; i < obj.rotation_matrix_0.length; i++) {
        if (!defined(obj.rotation_matrix_0[i])) continue
        var len = enc[3].encodingLength(obj.rotation_matrix_0[i])
        length += 2 + len
      }
    }
    if (defined(obj.rotation_matrix_1)) {
      for (var i = 0; i < obj.rotation_matrix_1.length; i++) {
        if (!defined(obj.rotation_matrix_1[i])) continue
        var len = enc[3].encodingLength(obj.rotation_matrix_1[i])
        length += 2 + len
      }
    }
    if (defined(obj.rotation_matrix_2)) {
      for (var i = 0; i < obj.rotation_matrix_2.length; i++) {
        if (!defined(obj.rotation_matrix_2[i])) continue
        var len = enc[3].encodingLength(obj.rotation_matrix_2[i])
        length += 2 + len
      }
    }
    if (defined(obj.rotation_matrix_4)) {
      for (var i = 0; i < obj.rotation_matrix_4.length; i++) {
        if (!defined(obj.rotation_matrix_4[i])) continue
        var len = enc[3].encodingLength(obj.rotation_matrix_4[i])
        length += 2 + len
      }
    }
    if (defined(obj.rotation_matrix_5)) {
      for (var i = 0; i < obj.rotation_matrix_5.length; i++) {
        if (!defined(obj.rotation_matrix_5[i])) continue
        var len = enc[3].encodingLength(obj.rotation_matrix_5[i])
        length += 2 + len
      }
    }
    if (defined(obj.rotation_matrix_6)) {
      for (var i = 0; i < obj.rotation_matrix_6.length; i++) {
        if (!defined(obj.rotation_matrix_6[i])) continue
        var len = enc[3].encodingLength(obj.rotation_matrix_6[i])
        length += 2 + len
      }
    }
    if (defined(obj.rotation_matrix_8)) {
      for (var i = 0; i < obj.rotation_matrix_8.length; i++) {
        if (!defined(obj.rotation_matrix_8[i])) continue
        var len = enc[3].encodingLength(obj.rotation_matrix_8[i])
        length += 2 + len
      }
    }
    if (defined(obj.rotation_matrix_9)) {
      for (var i = 0; i < obj.rotation_matrix_9.length; i++) {
        if (!defined(obj.rotation_matrix_9[i])) continue
        var len = enc[3].encodingLength(obj.rotation_matrix_9[i])
        length += 2 + len
      }
    }
    if (defined(obj.rotation_matrix_10)) {
      for (var i = 0; i < obj.rotation_matrix_10.length; i++) {
        if (!defined(obj.rotation_matrix_10[i])) continue
        var len = enc[3].encodingLength(obj.rotation_matrix_10[i])
        length += 2 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.station_id)) {
      buf[offset++] = 10
      enc[0].encode(obj.station_id, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.signature)) {
      buf[offset++] = 18
      enc[1].encode(obj.signature, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.start_time)) {
      buf[offset++] = 24
      enc[2].encode(obj.start_time, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.duration)) {
      buf[offset++] = 32
      enc[2].encode(obj.duration, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.location_sampling_rate)) {
      buf[offset++] = 40
      enc[2].encode(obj.location_sampling_rate, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.motion_sampling_rate)) {
      buf[offset++] = 48
      enc[2].encode(obj.motion_sampling_rate, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.latitude)) {
      for (var i = 0; i < obj.latitude.length; i++) {
        if (!defined(obj.latitude[i])) continue
        buf[offset++] = 61
        enc[3].encode(obj.latitude[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.longitude)) {
      for (var i = 0; i < obj.longitude.length; i++) {
        if (!defined(obj.longitude[i])) continue
        buf[offset++] = 69
        enc[3].encode(obj.longitude[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.altitude)) {
      for (var i = 0; i < obj.altitude.length; i++) {
        if (!defined(obj.altitude[i])) continue
        buf[offset++] = 77
        enc[3].encode(obj.altitude[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.gravity_x)) {
      for (var i = 0; i < obj.gravity_x.length; i++) {
        if (!defined(obj.gravity_x[i])) continue
        buf[offset++] = 85
        enc[3].encode(obj.gravity_x[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.gravity_y)) {
      for (var i = 0; i < obj.gravity_y.length; i++) {
        if (!defined(obj.gravity_y[i])) continue
        buf[offset++] = 93
        enc[3].encode(obj.gravity_y[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.gravity_z)) {
      for (var i = 0; i < obj.gravity_z.length; i++) {
        if (!defined(obj.gravity_z[i])) continue
        buf[offset++] = 101
        enc[3].encode(obj.gravity_z[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.geomagnetic_x)) {
      for (var i = 0; i < obj.geomagnetic_x.length; i++) {
        if (!defined(obj.geomagnetic_x[i])) continue
        buf[offset++] = 109
        enc[3].encode(obj.geomagnetic_x[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.geomagnetic_y)) {
      for (var i = 0; i < obj.geomagnetic_y.length; i++) {
        if (!defined(obj.geomagnetic_y[i])) continue
        buf[offset++] = 117
        enc[3].encode(obj.geomagnetic_y[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.geomagnetic_z)) {
      for (var i = 0; i < obj.geomagnetic_z.length; i++) {
        if (!defined(obj.geomagnetic_z[i])) continue
        buf[offset++] = 125
        enc[3].encode(obj.geomagnetic_z[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.raw_accel_x)) {
      for (var i = 0; i < obj.raw_accel_x.length; i++) {
        if (!defined(obj.raw_accel_x[i])) continue
        buf[offset++] = 133
        buf[offset++] = 1
        enc[3].encode(obj.raw_accel_x[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.raw_accel_y)) {
      for (var i = 0; i < obj.raw_accel_y.length; i++) {
        if (!defined(obj.raw_accel_y[i])) continue
        buf[offset++] = 141
        buf[offset++] = 1
        enc[3].encode(obj.raw_accel_y[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.raw_accel_z)) {
      for (var i = 0; i < obj.raw_accel_z.length; i++) {
        if (!defined(obj.raw_accel_z[i])) continue
        buf[offset++] = 149
        buf[offset++] = 1
        enc[3].encode(obj.raw_accel_z[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.linear_accel_x)) {
      for (var i = 0; i < obj.linear_accel_x.length; i++) {
        if (!defined(obj.linear_accel_x[i])) continue
        buf[offset++] = 157
        buf[offset++] = 1
        enc[3].encode(obj.linear_accel_x[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.linear_accel_y)) {
      for (var i = 0; i < obj.linear_accel_y.length; i++) {
        if (!defined(obj.linear_accel_y[i])) continue
        buf[offset++] = 165
        buf[offset++] = 1
        enc[3].encode(obj.linear_accel_y[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.linear_accel_z)) {
      for (var i = 0; i < obj.linear_accel_z.length; i++) {
        if (!defined(obj.linear_accel_z[i])) continue
        buf[offset++] = 173
        buf[offset++] = 1
        enc[3].encode(obj.linear_accel_z[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.rotation_rate_x)) {
      for (var i = 0; i < obj.rotation_rate_x.length; i++) {
        if (!defined(obj.rotation_rate_x[i])) continue
        buf[offset++] = 181
        buf[offset++] = 1
        enc[3].encode(obj.rotation_rate_x[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.rotation_rate_y)) {
      for (var i = 0; i < obj.rotation_rate_y.length; i++) {
        if (!defined(obj.rotation_rate_y[i])) continue
        buf[offset++] = 189
        buf[offset++] = 1
        enc[3].encode(obj.rotation_rate_y[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.rotation_rate_z)) {
      for (var i = 0; i < obj.rotation_rate_z.length; i++) {
        if (!defined(obj.rotation_rate_z[i])) continue
        buf[offset++] = 197
        buf[offset++] = 1
        enc[3].encode(obj.rotation_rate_z[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.inclination_matrix_5)) {
      for (var i = 0; i < obj.inclination_matrix_5.length; i++) {
        if (!defined(obj.inclination_matrix_5[i])) continue
        buf[offset++] = 205
        buf[offset++] = 1
        enc[3].encode(obj.inclination_matrix_5[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.inclination_matrix_6)) {
      for (var i = 0; i < obj.inclination_matrix_6.length; i++) {
        if (!defined(obj.inclination_matrix_6[i])) continue
        buf[offset++] = 213
        buf[offset++] = 1
        enc[3].encode(obj.inclination_matrix_6[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.inclination_matrix_9)) {
      for (var i = 0; i < obj.inclination_matrix_9.length; i++) {
        if (!defined(obj.inclination_matrix_9[i])) continue
        buf[offset++] = 221
        buf[offset++] = 1
        enc[3].encode(obj.inclination_matrix_9[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.inclination_matrix_10)) {
      for (var i = 0; i < obj.inclination_matrix_10.length; i++) {
        if (!defined(obj.inclination_matrix_10[i])) continue
        buf[offset++] = 229
        buf[offset++] = 1
        enc[3].encode(obj.inclination_matrix_10[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.rotation_matrix_0)) {
      for (var i = 0; i < obj.rotation_matrix_0.length; i++) {
        if (!defined(obj.rotation_matrix_0[i])) continue
        buf[offset++] = 237
        buf[offset++] = 1
        enc[3].encode(obj.rotation_matrix_0[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.rotation_matrix_1)) {
      for (var i = 0; i < obj.rotation_matrix_1.length; i++) {
        if (!defined(obj.rotation_matrix_1[i])) continue
        buf[offset++] = 245
        buf[offset++] = 1
        enc[3].encode(obj.rotation_matrix_1[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.rotation_matrix_2)) {
      for (var i = 0; i < obj.rotation_matrix_2.length; i++) {
        if (!defined(obj.rotation_matrix_2[i])) continue
        buf[offset++] = 253
        buf[offset++] = 1
        enc[3].encode(obj.rotation_matrix_2[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.rotation_matrix_4)) {
      for (var i = 0; i < obj.rotation_matrix_4.length; i++) {
        if (!defined(obj.rotation_matrix_4[i])) continue
        buf[offset++] = 133
        buf[offset++] = 2
        enc[3].encode(obj.rotation_matrix_4[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.rotation_matrix_5)) {
      for (var i = 0; i < obj.rotation_matrix_5.length; i++) {
        if (!defined(obj.rotation_matrix_5[i])) continue
        buf[offset++] = 141
        buf[offset++] = 2
        enc[3].encode(obj.rotation_matrix_5[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.rotation_matrix_6)) {
      for (var i = 0; i < obj.rotation_matrix_6.length; i++) {
        if (!defined(obj.rotation_matrix_6[i])) continue
        buf[offset++] = 149
        buf[offset++] = 2
        enc[3].encode(obj.rotation_matrix_6[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.rotation_matrix_8)) {
      for (var i = 0; i < obj.rotation_matrix_8.length; i++) {
        if (!defined(obj.rotation_matrix_8[i])) continue
        buf[offset++] = 157
        buf[offset++] = 2
        enc[3].encode(obj.rotation_matrix_8[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.rotation_matrix_9)) {
      for (var i = 0; i < obj.rotation_matrix_9.length; i++) {
        if (!defined(obj.rotation_matrix_9[i])) continue
        buf[offset++] = 165
        buf[offset++] = 2
        enc[3].encode(obj.rotation_matrix_9[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    if (defined(obj.rotation_matrix_10)) {
      for (var i = 0; i < obj.rotation_matrix_10.length; i++) {
        if (!defined(obj.rotation_matrix_10[i])) continue
        buf[offset++] = 173
        buf[offset++] = 2
        enc[3].encode(obj.rotation_matrix_10[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      station_id: "",
      signature: null,
      start_time: 0,
      duration: 0,
      location_sampling_rate: 0,
      motion_sampling_rate: 0,
      latitude: [],
      longitude: [],
      altitude: [],
      gravity_x: [],
      gravity_y: [],
      gravity_z: [],
      geomagnetic_x: [],
      geomagnetic_y: [],
      geomagnetic_z: [],
      raw_accel_x: [],
      raw_accel_y: [],
      raw_accel_z: [],
      linear_accel_x: [],
      linear_accel_y: [],
      linear_accel_z: [],
      rotation_rate_x: [],
      rotation_rate_y: [],
      rotation_rate_z: [],
      inclination_matrix_5: [],
      inclination_matrix_6: [],
      inclination_matrix_9: [],
      inclination_matrix_10: [],
      rotation_matrix_0: [],
      rotation_matrix_1: [],
      rotation_matrix_2: [],
      rotation_matrix_4: [],
      rotation_matrix_5: [],
      rotation_matrix_6: [],
      rotation_matrix_8: [],
      rotation_matrix_9: [],
      rotation_matrix_10: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.station_id = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.signature = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 3:
        obj.start_time = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        case 4:
        obj.duration = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        case 5:
        obj.location_sampling_rate = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        case 6:
        obj.motion_sampling_rate = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        case 7:
        obj.latitude.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 8:
        obj.longitude.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 9:
        obj.altitude.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 10:
        obj.gravity_x.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 11:
        obj.gravity_y.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 12:
        obj.gravity_z.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 13:
        obj.geomagnetic_x.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 14:
        obj.geomagnetic_y.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 15:
        obj.geomagnetic_z.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 16:
        obj.raw_accel_x.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 17:
        obj.raw_accel_y.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 18:
        obj.raw_accel_z.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 19:
        obj.linear_accel_x.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 20:
        obj.linear_accel_y.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 21:
        obj.linear_accel_z.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 22:
        obj.rotation_rate_x.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 23:
        obj.rotation_rate_y.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 24:
        obj.rotation_rate_z.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 25:
        obj.inclination_matrix_5.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 26:
        obj.inclination_matrix_6.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 27:
        obj.inclination_matrix_9.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 28:
        obj.inclination_matrix_10.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 29:
        obj.rotation_matrix_0.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 30:
        obj.rotation_matrix_1.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 31:
        obj.rotation_matrix_2.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 32:
        obj.rotation_matrix_4.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 33:
        obj.rotation_matrix_5.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 34:
        obj.rotation_matrix_6.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 35:
        obj.rotation_matrix_8.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 36:
        obj.rotation_matrix_9.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        case 37:
        obj.rotation_matrix_10.push(enc[3].decode(buf, offset))
        offset += enc[3].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
